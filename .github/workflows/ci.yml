name: Multi-folder CI Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  test_GetData:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Clone the repository
      - name: Checkout code
        uses: actions/checkout@v3

      # Step 2: Set up Python
      - name: Set up Python for GetData
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      # Step 3: Install and generate dependencies
      - name: Install dependencies for GetData
        working-directory: ./GetData
        run: |
          python -m pip install --upgrade pip pip-tools
          pip-compile requirements.in --output-file=requirements.txt
          pip-compile requirements-dev.in --output-file=requirements-dev.txt
          pip install -r requirements.txt

      # Step 4: Commit the updated requirements.txt if modified
      - name: Commit updated requirements.txt
        working-directory: ./GetData
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git add requirements.txt requirements-dev.txt
          git commit -m "CI: Update requirements.txt for GetData" || echo "No changes to commit"
          git pull --rebase https://x-access-token:${GITHUB_TOKEN}@github.com/${{ github.repository }} main
          git push https://x-access-token:${GITHUB_TOKEN}@github.com/${{ github.repository }} main

      # Step 5: Install pytest
      - name: Install pytest
        run: pip install pytest

      # Step 6: Run tests for GetData
      - name: Run tests for GetData
        working-directory: ./GetData
        run: |
          if [ -f "test_*.py" ] || [ -d "tests" ]; then
            pytest --disable-warnings
          else
            echo "No tests found in GetData directory"
            exit 0
          fi

  test_visualization:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Clone the repository
      - name: Checkout code
        uses: actions/checkout@v3

      # Step 2: Set up Python
      - name: Set up Python for Visualization
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      # Step 3: Install and generate dependencies
      - name: Install dependencies for Visualization
        working-directory: ./visualization
        run: |
          python -m pip install --upgrade pip pip-tools
          pip-compile requirements.in --output-file=requirements.txt
          pip-compile requirements-dev.in --output-file=requirements-dev.txt
          pip install -r requirements.txt

      # Step 4: Commit the updated requirements.txt if modified
      - name: Commit updated requirements.txt
        working-directory: ./visualization
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git add requirements.txt requirements-dev.txt
          git commit -m "CI: Update requirements.txt for Visualization" || echo "No changes to commit"
          git pull --rebase https://x-access-token:${GITHUB_TOKEN}@github.com/${{ github.repository }} main
          git push https://x-access-token:${GITHUB_TOKEN}@github.com/${{ github.repository }} main

      # Step 5: Install pytest
      - name: Install pytest
        run: pip install pytest

      # Step 6: Run tests for Visualization
      - name: Run tests for Visualization
        working-directory: ./visualization
        run: |
          if [ -f "test_*.py" ] || [ -d "tests" ]; then
            pytest --disable-warnings
          else
            echo "No tests found in Visualization directory"
            exit 0
          fi
  linting:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Clone the repository
      - name: Checkout code
        uses: actions/checkout@v3

      # Step 2: Set up Python
      - name: Set up Python for linting
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      # Step 3: Install flake8
      - name: Install flake8
        run: |
          python -m pip install --upgrade pip
          pip install flake8

      # Step 4: Run flake8 on all code
      - name: Lint all code
        run: |
          flake8 ./GetData
          flake8 ./visualization
